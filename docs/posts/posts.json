[
  {
    "path": "posts/2020-12-13-ggraph-explorer/",
    "title": "ggraph explorer",
    "description": "A Shiny App for showcasing network visualizations with ggraph",
    "author": [
      {
        "name": "Federica Zoe Ricci",
        "url": {}
      }
    ],
    "date": "2020-12-13",
    "categories": [
      "Shiny app",
      "Networks",
      "Visualization"
    ],
    "contents": "\n\n\nNetwork visualization  \n\n\nThis Shiny app , created in collaboration with Rachel Longjohn and Wendy Rummerfield, will let\nyou play around with some functions from the package\n\nggraph  - a package created by Thomas Lin Pedersen for plotting\ngraphs and networks based on the Grammar of Graphics.\nWe have downloaded from the web a dataset of Game\nof Thrones, of Harry Potter and\nof The\nLord of the Rings. The app displays a default network that we have\ncreated for each of those datasets and allows the user to modify certain\nplotting options, such as the layout (i.e. the way that existing nodes\nand edges are mapped to vertical and horizontal placement on the plot),\nthe size, shape and color of the nodes and of their labels, the style\nand the width of the edges. The code used to generate the plot is also\ndisplayed on a dedicated tab, and updates automatically in response to\nhow the user customizes the plot. Dedicated tabs also allow to see the\nunderlining data tables of nodes and edges.\nThe code for the app is available on\n\nGitHub.\nThe concept of ggraph explorer and its name were inspired by the\nShiny app ggplot\nexplorer.\n\n\n\n",
    "preview": "posts/2020-12-13-ggraph-explorer/../../img/lotr_no_opt.jpg",
    "last_modified": "2023-06-20T15:57:57-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-30-vanillabayescoresets/",
    "title": "vanillabayescoresets",
    "description": "An R package for implementing Uniform and Hilbert Frank-Wolfe Bayesian Coresets for logistic regression",
    "author": [
      {
        "name": "Federica Zoe Ricci",
        "url": {}
      }
    ],
    "date": "2020-11-30",
    "categories": [
      "R package",
      "Logistic regression",
      "Bayesian",
      "Coresets"
    ],
    "contents": "\nR package\nAs part of a course project, Rachel Longjohn and I have written an R package named vanillabayescoresets for implementing Bayesian coresets for binary logistic regression data in R. The functions provided in our package are simplified versions (reason for which the vanilla) of some of the functions available in Python through the packages lrcoresets and bayesian-coresets, created by Jonathan H. Huggins and Trevor Campbell.\nIn this article you can read some information about vanillabayescoresets. The package and its vignette are available on GitHub.\nA little background, first!\nFitting Bayesian models on large datasets using standard methods such as Markov Chain Monte Carlo can be computationally very expensive, and may reveal unfeasible in applications that require fast results.\nSeveral modifications of MCMC, as well as alternative methods like Variational Inference, have been developed for making inference on the full dataset more scalable.\nBayesian coresets are a different approach that achieves scalability by focusing on a pre-processing step, aimed at delivering a small, weighted subsample of the full data on which to run any inference algorithm.\nWhat is implemented in this package?\nThrough vanillabayescoresets’ functions you will be able to:\nobtain uniform or Hilbert Frank-Wolfe coresets for binary logistic regression data, setting the size of the coreset along with other construction parameters.\nplot the coreset selected over the full dataset, for the case with two covariates, to visualize which datapoints are selected and what weight is assigned to them by the two methods.\nquickly generate synthetic binary data, customizing the size of the sample, the number and the generative model of covariates, and the model parameters.\nThe functions in the package are:\nsimulate_logit_data(): simulate observations and covariates from a logistic regression model\nget_coreset_uniform(): implements the uniform coresets for binary logistic data, as detailed in Algorithm 1 of J. Huggins et al. (2016).\nget_coreset_frankwolfe(): implements the Hilbert Frank-Wolfe coresets for binary logistic data, as detailed in Algorithms 2 and 3 and Sections 4.2 and 5 of T. Campbell and T. Broderick (2019).\nvisualize_coresets(): plots the datapoints against two continuous covariates, labels them as either failures (i.e. y = -1) or successes (i.e. y = 1), marks the data points selected in the coreset and represents their weight as the point’s size.\nDemonstration\nThe following code demonstrates how to obtain and visualize a Frank-Wolfe coreset for a logistic regression of a binary variable on 2 covariates.\n\n\nlibrary(vanillabayescoresets)\n\ndata <- simulate_logit_data()\ncoreset_frankwolfe <- get_coreset_frankwolfe(data$x, data$y)\nvisualize_coresets(coreset_frankwolfe, data$x, data$y)\n\n\n\n\n\n\nFigure 1: Bayesian coresets for logistic regression obtained with the Frank-Wolfe method\n\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2020-11-30-vanillabayescoresets/2020-11-30-vanillabayescoresets_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2023-06-20T15:57:57-07:00",
    "input_file": {}
  }
]
